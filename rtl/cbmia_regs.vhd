---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for CBMIA 
---------------------------------------------------------------------------------------
-- File           : ../rtl/cbmia_regs.vhd
-- Author         : auto-generated by wbgen2 from cbmia_regs.wb
-- Created        : Fri Mar  2 10:45:50 2012
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE cbmia_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity cbmia_regs is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(3 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_irq_o                                 : out    std_logic;
-- Port for std_logic_vector field: 'VHDL version.' in reg: 'Status register.'
    cbmia_stat_ver_i                         : in     std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'PCB temperature.' in reg: 'Status register.'
    cbmia_stat_temp_i                        : in     std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Unique ID (MSB) register.' in reg: 'Unique ID (MSB) register.'
    cbmia_id_msb_i                           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Unique ID (LSB) register.' in reg: 'Unique ID (LSB) register.'
    cbmia_id_lsb_i                           : in     std_logic_vector(31 downto 0);
-- Port for MONOSTABLE field: 'Software reset.' in reg: 'Control register.'
    cbmia_ctrl_sw_rst_o                      : out    std_logic;
-- Port for MONOSTABLE field: 'Send frame.' in reg: 'Control register.'
    cbmia_ctrl_send_frame_o                  : out    std_logic;
-- Port for MONOSTABLE field: 'Clear Tx FIFO.' in reg: 'Control register.'
    cbmia_ctrl_clr_tx_fifo_o                 : out    std_logic;
-- Port for MONOSTABLE field: 'Clear Rx FIFO.' in reg: 'Control register.'
    cbmia_ctrl_clr_tx_fifo_o                 : out    std_logic;
-- Port for std_logic_vector field: 'Frame sent time-tag register.' in reg: 'Frame sent time-tag register.'
    cbmia_send_tag_i                         : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Frame reveived time-tag register.' in reg: 'Frame reveived time-tag register.'
    cbmia_receive_tag_i                      : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Free running counter register.' in reg: 'Free running counter register.'
    cbmia_tag_cnt_i                          : in     std_logic_vector(31 downto 0);
-- FIFO read request
    cbmia_tx_fifo_rd_req_i                   : in     std_logic;
-- FIFO full flag
    cbmia_tx_fifo_rd_full_o                  : out    std_logic;
-- FIFO empty flag
    cbmia_tx_fifo_rd_empty_o                 : out    std_logic;
-- FIFO number of used words
    cbmia_tx_fifo_rd_usedw_o                 : out    std_logic_vector(5 downto 0);
    cbmia_tx_fifo_word_o                     : out    std_logic_vector(15 downto 0);
    cbmia_tx_fifo_word_type_o                : out    std_logic;
-- FIFO write request
    cbmia_rx_fifo_wr_req_i                   : in     std_logic;
-- FIFO full flag
    cbmia_rx_fifo_wr_full_o                  : out    std_logic;
-- FIFO empty flag
    cbmia_rx_fifo_wr_empty_o                 : out    std_logic;
-- FIFO number of used words
    cbmia_rx_fifo_wr_usedw_o                 : out    std_logic_vector(5 downto 0);
    cbmia_rx_fifo_word_i                     : in     std_logic_vector(15 downto 0);
    cbmia_rx_fifo_word_type_i                : in     std_logic;
    cbmia_rx_fifo_word_error_i               : in     std_logic;
    cbmia_rx_fifo_parity_error_i             : in     std_logic;
    cbmia_rx_fifo_code_violation_i           : in     std_logic;
    irq_tx_done_i                            : in     std_logic;
    irq_rx_done_i                            : in     std_logic
  );
end cbmia_regs;

architecture syn of cbmia_regs is

signal cbmia_ctrl_sw_rst_dly0                   : std_logic      ;
signal cbmia_ctrl_sw_rst_int                    : std_logic      ;
signal cbmia_ctrl_send_frame_dly0               : std_logic      ;
signal cbmia_ctrl_send_frame_int                : std_logic      ;
signal cbmia_ctrl_clr_tx_fifo_dly0              : std_logic      ;
signal cbmia_ctrl_clr_tx_fifo_int               : std_logic      ;
signal cbmia_ctrl_clr_tx_fifo_dly0              : std_logic      ;
signal cbmia_ctrl_clr_tx_fifo_int               : std_logic      ;
signal cbmia_tx_fifo_in_int                     : std_logic_vector(16 downto 0);
signal cbmia_tx_fifo_out_int                    : std_logic_vector(16 downto 0);
signal cbmia_tx_fifo_wrreq_int                  : std_logic      ;
signal cbmia_rx_fifo_in_int                     : std_logic_vector(19 downto 0);
signal cbmia_rx_fifo_out_int                    : std_logic_vector(19 downto 0);
signal cbmia_rx_fifo_rdreq_int                  : std_logic      ;
signal cbmia_rx_fifo_rdreq_int_d0               : std_logic      ;
signal eic_idr_int                              : std_logic_vector(1 downto 0);
signal eic_idr_write_int                        : std_logic      ;
signal eic_ier_int                              : std_logic_vector(1 downto 0);
signal eic_ier_write_int                        : std_logic      ;
signal eic_imr_int                              : std_logic_vector(1 downto 0);
signal eic_isr_clear_int                        : std_logic_vector(1 downto 0);
signal eic_isr_status_int                       : std_logic_vector(1 downto 0);
signal eic_irq_ack_int                          : std_logic_vector(1 downto 0);
signal eic_isr_write_int                        : std_logic      ;
signal cbmia_tx_fifo_full_int                   : std_logic      ;
signal cbmia_tx_fifo_empty_int                  : std_logic      ;
signal cbmia_tx_fifo_usedw_int                  : std_logic_vector(5 downto 0);
signal cbmia_rx_fifo_full_int                   : std_logic      ;
signal cbmia_rx_fifo_empty_int                  : std_logic      ;
signal cbmia_rx_fifo_usedw_int                  : std_logic_vector(5 downto 0);
signal irq_inputs_vector_int                    : std_logic_vector(1 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      cbmia_ctrl_sw_rst_int <= '0';
      cbmia_ctrl_send_frame_int <= '0';
      cbmia_ctrl_clr_tx_fifo_int <= '0';
      cbmia_ctrl_clr_tx_fifo_int <= '0';
      eic_idr_write_int <= '0';
      eic_ier_write_int <= '0';
      eic_isr_write_int <= '0';
      cbmia_tx_fifo_wrreq_int <= '0';
      cbmia_rx_fifo_rdreq_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          cbmia_ctrl_sw_rst_int <= '0';
          cbmia_ctrl_send_frame_int <= '0';
          cbmia_ctrl_clr_tx_fifo_int <= '0';
          cbmia_ctrl_clr_tx_fifo_int <= '0';
          eic_idr_write_int <= '0';
          eic_ier_write_int <= '0';
          eic_isr_write_int <= '0';
          cbmia_tx_fifo_wrreq_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(15 downto 0) <= cbmia_stat_ver_i;
              rddata_reg(31 downto 16) <= cbmia_stat_temp_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= cbmia_id_msb_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= cbmia_id_lsb_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
              cbmia_ctrl_sw_rst_int <= wrdata_reg(0);
              rddata_reg(0) <= 'X';
              cbmia_ctrl_send_frame_int <= wrdata_reg(1);
              rddata_reg(1) <= 'X';
              cbmia_ctrl_clr_tx_fifo_int <= wrdata_reg(2);
              rddata_reg(2) <= 'X';
              cbmia_ctrl_clr_tx_fifo_int <= wrdata_reg(3);
              rddata_reg(3) <= 'X';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= cbmia_send_tag_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= cbmia_receive_tag_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= cbmia_tag_cnt_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000" => 
            if (wb_we_i = '1') then
              eic_idr_write_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001" => 
            if (wb_we_i = '1') then
              eic_ier_write_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(1 downto 0) <= eic_imr_int(1 downto 0);
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011" => 
            if (wb_we_i = '1') then
              eic_isr_write_int <= '1';
            else
              rddata_reg(1 downto 0) <= eic_isr_status_int(1 downto 0);
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100" => 
            if (wb_we_i = '1') then
              cbmia_tx_fifo_in_int(15 downto 0) <= wrdata_reg(15 downto 0);
              cbmia_tx_fifo_in_int(16) <= wrdata_reg(16);
              cbmia_tx_fifo_wrreq_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(16) <= cbmia_tx_fifo_full_int;
              rddata_reg(17) <= cbmia_tx_fifo_empty_int;
              rddata_reg(5 downto 0) <= cbmia_tx_fifo_usedw_int;
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1110" => 
            if (wb_we_i = '1') then
            else
              if (cbmia_rx_fifo_rdreq_int_d0 = '0') then
                cbmia_rx_fifo_rdreq_int <= not cbmia_rx_fifo_rdreq_int;
              else
                rddata_reg(15 downto 0) <= cbmia_rx_fifo_out_int(15 downto 0);
                rddata_reg(16) <= cbmia_rx_fifo_out_int(16);
                rddata_reg(17) <= cbmia_rx_fifo_out_int(17);
                rddata_reg(18) <= cbmia_rx_fifo_out_int(18);
                rddata_reg(19) <= cbmia_rx_fifo_out_int(19);
                ack_in_progress <= '1';
                ack_sreg(0) <= '1';
              end if;
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
          when "1111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(16) <= cbmia_rx_fifo_full_int;
              rddata_reg(17) <= cbmia_rx_fifo_empty_int;
              rddata_reg(5 downto 0) <= cbmia_rx_fifo_usedw_int;
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- VHDL version.
-- PCB temperature.
-- Unique ID (MSB) register.
-- Unique ID (LSB) register.
-- Software reset.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_ctrl_sw_rst_dly0 <= '0';
      cbmia_ctrl_sw_rst_o <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_ctrl_sw_rst_dly0 <= cbmia_ctrl_sw_rst_int;
      cbmia_ctrl_sw_rst_o <= cbmia_ctrl_sw_rst_int and (not cbmia_ctrl_sw_rst_dly0);
    end if;
  end process;
  
  
-- Send frame.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_ctrl_send_frame_dly0 <= '0';
      cbmia_ctrl_send_frame_o <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_ctrl_send_frame_dly0 <= cbmia_ctrl_send_frame_int;
      cbmia_ctrl_send_frame_o <= cbmia_ctrl_send_frame_int and (not cbmia_ctrl_send_frame_dly0);
    end if;
  end process;
  
  
-- Clear Tx FIFO.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_ctrl_clr_tx_fifo_dly0 <= '0';
      cbmia_ctrl_clr_tx_fifo_o <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_ctrl_clr_tx_fifo_dly0 <= cbmia_ctrl_clr_tx_fifo_int;
      cbmia_ctrl_clr_tx_fifo_o <= cbmia_ctrl_clr_tx_fifo_int and (not cbmia_ctrl_clr_tx_fifo_dly0);
    end if;
  end process;
  
  
-- Clear Rx FIFO.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_ctrl_clr_tx_fifo_dly0 <= '0';
      cbmia_ctrl_clr_tx_fifo_o <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_ctrl_clr_tx_fifo_dly0 <= cbmia_ctrl_clr_tx_fifo_int;
      cbmia_ctrl_clr_tx_fifo_o <= cbmia_ctrl_clr_tx_fifo_int and (not cbmia_ctrl_clr_tx_fifo_dly0);
    end if;
  end process;
  
  
-- Frame sent time-tag register.
-- Frame reveived time-tag register.
-- Free running counter register.
-- extra code for reg/fifo/mem: mil1553 transmitter
  cbmia_tx_fifo_word_o <= cbmia_tx_fifo_out_int(15 downto 0);
  cbmia_tx_fifo_word_type_o <= cbmia_tx_fifo_out_int(16);
  cbmia_tx_fifo_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 33,
      g_width              => 17,
      g_usedw_size         => 6
    )
    port map (
      rd_req_i             => cbmia_tx_fifo_rd_req_i,
      rd_full_o            => cbmia_tx_fifo_rd_full_o,
      rd_empty_o           => cbmia_tx_fifo_rd_empty_o,
      rd_usedw_o           => cbmia_tx_fifo_rd_usedw_o,
      wr_full_o            => cbmia_tx_fifo_full_int,
      wr_empty_o           => cbmia_tx_fifo_empty_int,
      wr_usedw_o           => cbmia_tx_fifo_usedw_int,
      wr_req_i             => cbmia_tx_fifo_wrreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => cbmia_tx_fifo_in_int,
      rd_data_o            => cbmia_tx_fifo_out_int
    );
  
-- extra code for reg/fifo/mem: mil1553 receiver
  cbmia_rx_fifo_in_int(15 downto 0) <= cbmia_rx_fifo_word_i;
  cbmia_rx_fifo_in_int(16) <= cbmia_rx_fifo_word_type_i;
  cbmia_rx_fifo_in_int(17) <= cbmia_rx_fifo_word_error_i;
  cbmia_rx_fifo_in_int(18) <= cbmia_rx_fifo_parity_error_i;
  cbmia_rx_fifo_in_int(19) <= cbmia_rx_fifo_code_violation_i;
  cbmia_rx_fifo_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 33,
      g_width              => 20,
      g_usedw_size         => 6
    )
    port map (
      wr_req_i             => cbmia_rx_fifo_wr_req_i,
      wr_full_o            => cbmia_rx_fifo_wr_full_o,
      wr_empty_o           => cbmia_rx_fifo_wr_empty_o,
      wr_usedw_o           => cbmia_rx_fifo_wr_usedw_o,
      rd_full_o            => cbmia_rx_fifo_full_int,
      rd_empty_o           => cbmia_rx_fifo_empty_int,
      rd_usedw_o           => cbmia_rx_fifo_usedw_int,
      rd_req_i             => cbmia_rx_fifo_rdreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => cbmia_rx_fifo_in_int,
      rd_data_o            => cbmia_rx_fifo_out_int
    );
  
-- extra code for reg/fifo/mem: Interrupt disable register
  eic_idr_int(1 downto 0) <= wrdata_reg(1 downto 0);
-- extra code for reg/fifo/mem: Interrupt enable register
  eic_ier_int(1 downto 0) <= wrdata_reg(1 downto 0);
-- extra code for reg/fifo/mem: Interrupt status register
  eic_isr_clear_int(1 downto 0) <= wrdata_reg(1 downto 0);
-- extra code for reg/fifo/mem: IRQ_CONTROLLER
  eic_irq_controller_inst : wbgen2_eic
    generic map (
      g_num_interrupts     => 2,
      g_irq00_mode         => 2,
      g_irq01_mode         => 2,
      g_irq02_mode         => 0,
      g_irq03_mode         => 0,
      g_irq04_mode         => 0,
      g_irq05_mode         => 0,
      g_irq06_mode         => 0,
      g_irq07_mode         => 0,
      g_irq08_mode         => 0,
      g_irq09_mode         => 0,
      g_irq0a_mode         => 0,
      g_irq0b_mode         => 0,
      g_irq0c_mode         => 0,
      g_irq0d_mode         => 0,
      g_irq0e_mode         => 0,
      g_irq0f_mode         => 0,
      g_irq10_mode         => 0,
      g_irq11_mode         => 0,
      g_irq12_mode         => 0,
      g_irq13_mode         => 0,
      g_irq14_mode         => 0,
      g_irq15_mode         => 0,
      g_irq16_mode         => 0,
      g_irq17_mode         => 0,
      g_irq18_mode         => 0,
      g_irq19_mode         => 0,
      g_irq1a_mode         => 0,
      g_irq1b_mode         => 0,
      g_irq1c_mode         => 0,
      g_irq1d_mode         => 0,
      g_irq1e_mode         => 0,
      g_irq1f_mode         => 0
    )
    port map (
      clk_i                => bus_clock_int,
      rst_n_i              => rst_n_i,
      irq_i                => irq_inputs_vector_int,
      irq_ack_o            => eic_irq_ack_int,
      reg_imr_o            => eic_imr_int,
      reg_ier_i            => eic_ier_int,
      reg_ier_wr_stb_i     => eic_ier_write_int,
      reg_idr_i            => eic_idr_int,
      reg_idr_wr_stb_i     => eic_idr_write_int,
      reg_isr_o            => eic_isr_status_int,
      reg_isr_i            => eic_isr_clear_int,
      reg_isr_wr_stb_i     => eic_isr_write_int,
      wb_irq_o             => wb_irq_o
    );
  
  irq_inputs_vector_int(0) <= irq_tx_done_i;
  irq_inputs_vector_int(1) <= irq_rx_done_i;
-- extra code for reg/fifo/mem: FIFO 'mil1553 transmitter' data input register 0
-- extra code for reg/fifo/mem: FIFO 'mil1553 receiver' data output register 0
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_rx_fifo_rdreq_int_d0 <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_rx_fifo_rdreq_int_d0 <= cbmia_rx_fifo_rdreq_int;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
