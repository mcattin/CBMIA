/*
  Register definitions for slave core: CBMIA 

  * File           : cbmia_regs.h
  * Author         : auto-generated by wbgen2 from cbmia_regs.wb
  * Created        : Fri Mar  9 17:13:48 2012
  * Standard       : ANSI C

    THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE cbmia_regs.wb
    DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!

*/

#ifndef __WBGEN2_REGDEFS_CBMIA_REGS_WB
#define __WBGEN2_REGDEFS_CBMIA_REGS_WB

#include <inttypes.h>

#if defined( __GNUC__)
#define PACKED __attribute__ ((packed))
#else
#error "Unsupported compiler?"
#endif

#ifndef __WBGEN2_MACROS_DEFINED__
#define __WBGEN2_MACROS_DEFINED__
#define WBGEN2_GEN_MASK(offset, size) (((1<<(size))-1) << (offset))
#define WBGEN2_GEN_WRITE(value, offset, size) (((value) & ((1<<(size))-1)) << (offset))
#define WBGEN2_GEN_READ(reg, offset, size) (((reg) >> (offset)) & ((1<<(size))-1))
#define WBGEN2_SIGN_EXTEND(value, bits) (((value) & (1<<bits) ? ~((1<<(bits))-1): 0 ) | (value))
#endif


/* definitions for register: Interrupt source register. */

/* definitions for field: RX done. in reg: Interrupt source register. */
#define CBMIA_IRQ_SRC_RX_DONE                 WBGEN2_GEN_MASK(0, 1)

/* definitions for field: TX done. in reg: Interrupt source register. */
#define CBMIA_IRQ_SRC_TX_DONE                 WBGEN2_GEN_MASK(1, 1)

/* definitions for register: Interrupt enable register. */

/* definitions for field: RX done interrupt enable. in reg: Interrupt enable register. */
#define CBMIA_IRQ_EN_RX_DONE                  WBGEN2_GEN_MASK(0, 1)

/* definitions for field: TX done interrupt enable. in reg: Interrupt enable register. */
#define CBMIA_IRQ_EN_TX_DONE                  WBGEN2_GEN_MASK(1, 1)

/* definitions for register: RTI presence register. */

/* definitions for register: Status register. */

/* definitions for field: VHDL version. in reg: Status register. */
#define CBMIA_STAT_VER_MASK                   WBGEN2_GEN_MASK(0, 16)
#define CBMIA_STAT_VER_SHIFT                  0
#define CBMIA_STAT_VER_W(value)               WBGEN2_GEN_WRITE(value, 0, 16)
#define CBMIA_STAT_VER_R(reg)                 WBGEN2_GEN_READ(reg, 0, 16)

/* definitions for field: PCB temperature. in reg: Status register. */
#define CBMIA_STAT_TEMP_MASK                  WBGEN2_GEN_MASK(16, 16)
#define CBMIA_STAT_TEMP_SHIFT                 16
#define CBMIA_STAT_TEMP_W(value)              WBGEN2_GEN_WRITE(value, 16, 16)
#define CBMIA_STAT_TEMP_R(reg)                WBGEN2_GEN_READ(reg, 16, 16)

/* definitions for register: Control register. */

/* definitions for field: Software reset. in reg: Control register. */
#define CBMIA_CTRL_SW_RST                     WBGEN2_GEN_MASK(0, 1)

/* definitions for field: Disable hardware polling. in reg: Control register. */
#define CBMIA_CTRL_HW_POL_DIS                 WBGEN2_GEN_MASK(1, 1)

/* definitions for register: Spare register */

/* definitions for register: Unique ID (MSB) register. */

/* definitions for register: Unique ID (LSB) register. */

/* definitions for register: Transmit register. */

/* definitions for register: Receive register. */
/* definitions for RAM: Receive buffer */
#define CBMIA_RX_BUF_BYTES 0x00000040 /* size in bytes */                               
#define CBMIA_RX_BUF_WORDS 0x00000020 /* size in 16-bit words, 32-bit aligned */        
/* definitions for RAM: Transmit buffer */
#define CBMIA_TX_BUF_BYTES 0x00000040 /* size in bytes */                               
#define CBMIA_TX_BUF_WORDS 0x00000020 /* size in 16-bit words, 32-bit aligned */        

PACKED struct CBMIA_WB {
  /* [0x0]: REG Interrupt source register. */
  uint32_t IRQ_SRC;
  /* [0x4]: REG Interrupt enable register. */
  uint32_t IRQ_EN;
  /* [0x8]: REG RTI presence register. */
  uint32_t RTI_PRES;
  /* [0xc]: REG Status register. */
  uint32_t STAT;
  /* [0x10]: REG Control register. */
  uint32_t CTRL;
  /* [0x14]: REG Spare register */
  uint32_t SPARE;
  /* [0x18]: REG Unique ID (MSB) register. */
  uint32_t ID_MSB;
  /* [0x1c]: REG Unique ID (LSB) register. */
  uint32_t ID_LSB;
  /* [0x20]: REG Transmit register. */
  uint32_t TX_REG;
  /* [0x24]: REG Receive register. */
  uint32_t RX_REG;
  /* padding to: 32 words */
  uint32_t __padding_0[22];
  /* [0x80 - 0xff]: RAM Receive buffer, 32 16-bit words, 32-bit aligned, word-addressable */
  uint32_t RX_BUF [32];
  /* padding to: 64 words */
  uint32_t __padding_1[32];
  /* [0x100 - 0x17f]: RAM Transmit buffer, 32 16-bit words, 32-bit aligned, word-addressable */
  uint32_t TX_BUF [32];
};

#endif
