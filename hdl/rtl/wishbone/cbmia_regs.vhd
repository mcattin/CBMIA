---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for CBMIA 
---------------------------------------------------------------------------------------
-- File           : ../rtl/cbmia_regs.vhd
-- Author         : auto-generated by wbgen2 from cbmia_regs.wb
-- Created        : Fri Mar  9 17:13:48 2012
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE cbmia_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity cbmia_regs is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(6 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- Port for BIT field: 'RX done.' in reg: 'Interrupt source register.'
    cbmia_irq_src_rx_done_i                  : in     std_logic;
-- Port for BIT field: 'TX done.' in reg: 'Interrupt source register.'
    cbmia_irq_src_tx_done_i                  : in     std_logic;
-- Port for BIT field: 'RX done interrupt enable.' in reg: 'Interrupt enable register.'
    cbmia_irq_en_rx_done_o                   : out    std_logic;
-- Port for BIT field: 'TX done interrupt enable.' in reg: 'Interrupt enable register.'
    cbmia_irq_en_tx_done_o                   : out    std_logic;
-- Port for std_logic_vector field: 'RTI presence register.' in reg: 'RTI presence register.'
    cbmia_rti_pres_i                         : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'VHDL version.' in reg: 'Status register.'
    cbmia_stat_ver_i                         : in     std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'PCB temperature.' in reg: 'Status register.'
    cbmia_stat_temp_i                        : in     std_logic_vector(15 downto 0);
-- Port for MONOSTABLE field: 'Software reset.' in reg: 'Control register.'
    cbmia_ctrl_sw_rst_o                      : out    std_logic;
-- Port for BIT field: 'Disable hardware polling.' in reg: 'Control register.'
    cbmia_ctrl_hw_pol_dis_o                  : out    std_logic;
-- Port for std_logic_vector field: 'Spare' in reg: 'Spare register'
    cbmia_spare_i                            : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Unique ID (MSB) register.' in reg: 'Unique ID (MSB) register.'
    cbmia_id_msb_i                           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Unique ID (LSB) register.' in reg: 'Unique ID (LSB) register.'
    cbmia_id_lsb_i                           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Transmit register.' in reg: 'Transmit register.'
    cbmia_tx_reg_o                           : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Receive register.' in reg: 'Receive register.'
    cbmia_rx_reg_i                           : in     std_logic_vector(15 downto 0);
-- Ports for RAM: Receive buffer
    cbmia_rx_buf_addr_i                      : in     std_logic_vector(4 downto 0);
-- Write data input
    cbmia_rx_buf_data_i                      : in     std_logic_vector(15 downto 0);
-- Write strobe (active high)
    cbmia_rx_buf_wr_i                        : in     std_logic;
-- Ports for RAM: Transmit buffer
    cbmia_tx_buf_addr_i                      : in     std_logic_vector(4 downto 0);
-- Read data output
    cbmia_tx_buf_data_o                      : out    std_logic_vector(15 downto 0);
-- Read strobe input (active high)
    cbmia_tx_buf_rd_i                        : in     std_logic
  );
end cbmia_regs;

architecture syn of cbmia_regs is

signal cbmia_irq_en_rx_done_int                 : std_logic      ;
signal cbmia_irq_en_tx_done_int                 : std_logic      ;
signal cbmia_ctrl_sw_rst_dly0                   : std_logic      ;
signal cbmia_ctrl_sw_rst_int                    : std_logic      ;
signal cbmia_ctrl_hw_pol_dis_int                : std_logic      ;
signal cbmia_tx_reg_int                         : std_logic_vector(15 downto 0);
signal cbmia_rx_buf_rddata_int                  : std_logic_vector(15 downto 0);
signal cbmia_rx_buf_rd_int                      : std_logic      ;
signal cbmia_rx_buf_wr_int                      : std_logic      ;
signal cbmia_tx_buf_rddata_int                  : std_logic_vector(15 downto 0);
signal cbmia_tx_buf_rd_int                      : std_logic      ;
signal cbmia_tx_buf_wr_int                      : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(6 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      cbmia_irq_en_rx_done_int <= '0';
      cbmia_irq_en_tx_done_int <= '0';
      cbmia_ctrl_sw_rst_int <= '0';
      cbmia_ctrl_hw_pol_dis_int <= '0';
      cbmia_tx_reg_int <= "0000000000000000";
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          cbmia_ctrl_sw_rst_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(6 downto 5) is
          when "00" => 
            case rwaddr_reg(3 downto 0) is
            when "0000" => 
              if (wb_we_i = '1') then
                rddata_reg(0) <= 'X';
                rddata_reg(1) <= 'X';
              else
                rddata_reg(0) <= cbmia_irq_src_rx_done_i;
                rddata_reg(1) <= cbmia_irq_src_tx_done_i;
                rddata_reg(2) <= 'X';
                rddata_reg(3) <= 'X';
                rddata_reg(4) <= 'X';
                rddata_reg(5) <= 'X';
                rddata_reg(6) <= 'X';
                rddata_reg(7) <= 'X';
                rddata_reg(8) <= 'X';
                rddata_reg(9) <= 'X';
                rddata_reg(10) <= 'X';
                rddata_reg(11) <= 'X';
                rddata_reg(12) <= 'X';
                rddata_reg(13) <= 'X';
                rddata_reg(14) <= 'X';
                rddata_reg(15) <= 'X';
                rddata_reg(16) <= 'X';
                rddata_reg(17) <= 'X';
                rddata_reg(18) <= 'X';
                rddata_reg(19) <= 'X';
                rddata_reg(20) <= 'X';
                rddata_reg(21) <= 'X';
                rddata_reg(22) <= 'X';
                rddata_reg(23) <= 'X';
                rddata_reg(24) <= 'X';
                rddata_reg(25) <= 'X';
                rddata_reg(26) <= 'X';
                rddata_reg(27) <= 'X';
                rddata_reg(28) <= 'X';
                rddata_reg(29) <= 'X';
                rddata_reg(30) <= 'X';
                rddata_reg(31) <= 'X';
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0001" => 
              if (wb_we_i = '1') then
                rddata_reg(0) <= 'X';
                cbmia_irq_en_rx_done_int <= wrdata_reg(0);
                rddata_reg(1) <= 'X';
                cbmia_irq_en_tx_done_int <= wrdata_reg(1);
              else
                rddata_reg(0) <= cbmia_irq_en_rx_done_int;
                rddata_reg(1) <= cbmia_irq_en_tx_done_int;
                rddata_reg(2) <= 'X';
                rddata_reg(3) <= 'X';
                rddata_reg(4) <= 'X';
                rddata_reg(5) <= 'X';
                rddata_reg(6) <= 'X';
                rddata_reg(7) <= 'X';
                rddata_reg(8) <= 'X';
                rddata_reg(9) <= 'X';
                rddata_reg(10) <= 'X';
                rddata_reg(11) <= 'X';
                rddata_reg(12) <= 'X';
                rddata_reg(13) <= 'X';
                rddata_reg(14) <= 'X';
                rddata_reg(15) <= 'X';
                rddata_reg(16) <= 'X';
                rddata_reg(17) <= 'X';
                rddata_reg(18) <= 'X';
                rddata_reg(19) <= 'X';
                rddata_reg(20) <= 'X';
                rddata_reg(21) <= 'X';
                rddata_reg(22) <= 'X';
                rddata_reg(23) <= 'X';
                rddata_reg(24) <= 'X';
                rddata_reg(25) <= 'X';
                rddata_reg(26) <= 'X';
                rddata_reg(27) <= 'X';
                rddata_reg(28) <= 'X';
                rddata_reg(29) <= 'X';
                rddata_reg(30) <= 'X';
                rddata_reg(31) <= 'X';
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0010" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(31 downto 0) <= cbmia_rti_pres_i;
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0011" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(15 downto 0) <= cbmia_stat_ver_i;
                rddata_reg(31 downto 16) <= cbmia_stat_temp_i;
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0100" => 
              if (wb_we_i = '1') then
                cbmia_ctrl_sw_rst_int <= wrdata_reg(0);
                rddata_reg(0) <= 'X';
                rddata_reg(1) <= 'X';
                cbmia_ctrl_hw_pol_dis_int <= wrdata_reg(1);
              else
                rddata_reg(0) <= 'X';
                rddata_reg(1) <= cbmia_ctrl_hw_pol_dis_int;
                rddata_reg(2) <= 'X';
                rddata_reg(3) <= 'X';
                rddata_reg(4) <= 'X';
                rddata_reg(5) <= 'X';
                rddata_reg(6) <= 'X';
                rddata_reg(7) <= 'X';
                rddata_reg(8) <= 'X';
                rddata_reg(9) <= 'X';
                rddata_reg(10) <= 'X';
                rddata_reg(11) <= 'X';
                rddata_reg(12) <= 'X';
                rddata_reg(13) <= 'X';
                rddata_reg(14) <= 'X';
                rddata_reg(15) <= 'X';
                rddata_reg(16) <= 'X';
                rddata_reg(17) <= 'X';
                rddata_reg(18) <= 'X';
                rddata_reg(19) <= 'X';
                rddata_reg(20) <= 'X';
                rddata_reg(21) <= 'X';
                rddata_reg(22) <= 'X';
                rddata_reg(23) <= 'X';
                rddata_reg(24) <= 'X';
                rddata_reg(25) <= 'X';
                rddata_reg(26) <= 'X';
                rddata_reg(27) <= 'X';
                rddata_reg(28) <= 'X';
                rddata_reg(29) <= 'X';
                rddata_reg(30) <= 'X';
                rddata_reg(31) <= 'X';
              end if;
              ack_sreg(2) <= '1';
              ack_in_progress <= '1';
            when "0101" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(31 downto 0) <= cbmia_spare_i;
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0110" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(31 downto 0) <= cbmia_id_msb_i;
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "0111" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(31 downto 0) <= cbmia_id_lsb_i;
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "1000" => 
              if (wb_we_i = '1') then
                cbmia_tx_reg_int <= wrdata_reg(15 downto 0);
              else
                rddata_reg(15 downto 0) <= cbmia_tx_reg_int;
                rddata_reg(16) <= 'X';
                rddata_reg(17) <= 'X';
                rddata_reg(18) <= 'X';
                rddata_reg(19) <= 'X';
                rddata_reg(20) <= 'X';
                rddata_reg(21) <= 'X';
                rddata_reg(22) <= 'X';
                rddata_reg(23) <= 'X';
                rddata_reg(24) <= 'X';
                rddata_reg(25) <= 'X';
                rddata_reg(26) <= 'X';
                rddata_reg(27) <= 'X';
                rddata_reg(28) <= 'X';
                rddata_reg(29) <= 'X';
                rddata_reg(30) <= 'X';
                rddata_reg(31) <= 'X';
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when "1001" => 
              if (wb_we_i = '1') then
              else
                rddata_reg(15 downto 0) <= cbmia_rx_reg_i;
                rddata_reg(16) <= 'X';
                rddata_reg(17) <= 'X';
                rddata_reg(18) <= 'X';
                rddata_reg(19) <= 'X';
                rddata_reg(20) <= 'X';
                rddata_reg(21) <= 'X';
                rddata_reg(22) <= 'X';
                rddata_reg(23) <= 'X';
                rddata_reg(24) <= 'X';
                rddata_reg(25) <= 'X';
                rddata_reg(26) <= 'X';
                rddata_reg(27) <= 'X';
                rddata_reg(28) <= 'X';
                rddata_reg(29) <= 'X';
                rddata_reg(30) <= 'X';
                rddata_reg(31) <= 'X';
              end if;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when others =>
-- prevent the slave from hanging the bus on invalid address
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end case;
          when "01" => 
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "10" => 
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Data output multiplexer process
  process (rddata_reg, rwaddr_reg, cbmia_rx_buf_rddata_int, cbmia_tx_buf_rddata_int, wb_addr_i  )
  begin
    case rwaddr_reg(6 downto 5) is
    when "01" => 
      wb_data_o(15 downto 0) <= cbmia_rx_buf_rddata_int;
      wb_data_o(31 downto 16) <= "0000000000000000";
    when "10" => 
      wb_data_o(15 downto 0) <= cbmia_tx_buf_rddata_int;
      wb_data_o(31 downto 16) <= "0000000000000000";
    when others =>
      wb_data_o <= rddata_reg;
    end case;
  end process;
  
  
-- Read & write lines decoder for RAMs
  process (wb_addr_i, rd_int, wr_int  )
  begin
    if (wb_addr_i(6 downto 5) = "01") then
      cbmia_rx_buf_rd_int <= rd_int;
      cbmia_rx_buf_wr_int <= wr_int;
    else
      cbmia_rx_buf_wr_int <= '0';
      cbmia_rx_buf_rd_int <= '0';
    end if;
    if (wb_addr_i(6 downto 5) = "10") then
      cbmia_tx_buf_rd_int <= rd_int;
      cbmia_tx_buf_wr_int <= wr_int;
    else
      cbmia_tx_buf_wr_int <= '0';
      cbmia_tx_buf_rd_int <= '0';
    end if;
  end process;
  
  
-- RX done.
-- TX done.
-- RX done interrupt enable.
  cbmia_irq_en_rx_done_o <= cbmia_irq_en_rx_done_int;
-- TX done interrupt enable.
  cbmia_irq_en_tx_done_o <= cbmia_irq_en_tx_done_int;
-- RTI presence register.
-- VHDL version.
-- PCB temperature.
-- Software reset.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      cbmia_ctrl_sw_rst_dly0 <= '0';
      cbmia_ctrl_sw_rst_o <= '0';
    elsif rising_edge(bus_clock_int) then
      cbmia_ctrl_sw_rst_dly0 <= cbmia_ctrl_sw_rst_int;
      cbmia_ctrl_sw_rst_o <= cbmia_ctrl_sw_rst_int and (not cbmia_ctrl_sw_rst_dly0);
    end if;
  end process;
  
  
-- Disable hardware polling.
  cbmia_ctrl_hw_pol_dis_o <= cbmia_ctrl_hw_pol_dis_int;
-- Spare
-- Unique ID (MSB) register.
-- Unique ID (LSB) register.
-- Transmit register.
  cbmia_tx_reg_o <= cbmia_tx_reg_int;
-- Receive register.
-- extra code for reg/fifo/mem: Receive buffer
-- RAM block instantiation for memory: Receive buffer
  cbmia_rx_buf_raminst : wbgen2_dpssram
    generic map (
      g_data_width         => 16,
      g_size               => 32,
      g_addr_width         => 5,
      g_dual_clock         => false,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => bus_clock_int,
      clk_b_i              => bus_clock_int,
      addr_b_i             => cbmia_rx_buf_addr_i,
      addr_a_i             => rwaddr_reg(4 downto 0),
      data_b_o             => open,
      rd_b_i               => allzeros(0),
      data_b_i             => cbmia_rx_buf_data_i,
      wr_b_i               => cbmia_rx_buf_wr_i,
      bwsel_b_i            => allones(1 downto 0),
      data_a_o             => cbmia_rx_buf_rddata_int(15 downto 0),
      rd_a_i               => cbmia_rx_buf_rd_int,
      data_a_i             => wrdata_reg(15 downto 0),
      wr_a_i               => cbmia_rx_buf_wr_int,
      bwsel_a_i            => allones(1 downto 0)
    );
  
-- extra code for reg/fifo/mem: Transmit buffer
-- RAM block instantiation for memory: Transmit buffer
  cbmia_tx_buf_raminst : wbgen2_dpssram
    generic map (
      g_data_width         => 16,
      g_size               => 32,
      g_addr_width         => 5,
      g_dual_clock         => false,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => bus_clock_int,
      clk_b_i              => bus_clock_int,
      addr_b_i             => cbmia_tx_buf_addr_i,
      addr_a_i             => rwaddr_reg(4 downto 0),
      data_b_o             => cbmia_tx_buf_data_o,
      rd_b_i               => cbmia_tx_buf_rd_i,
      bwsel_b_i            => allones(1 downto 0),
      data_b_i             => allzeros(15 downto 0),
      wr_b_i               => allzeros(0),
      data_a_o             => cbmia_tx_buf_rddata_int(15 downto 0),
      rd_a_i               => cbmia_tx_buf_rd_int,
      data_a_i             => wrdata_reg(15 downto 0),
      wr_a_i               => cbmia_tx_buf_wr_int,
      bwsel_a_i            => allones(1 downto 0)
    );
  
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
