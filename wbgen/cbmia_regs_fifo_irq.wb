-- -*- Mode: LUA; tab-width: 2 -*-

-------------------------------------------------------------------------------
-- Title      : CBMIA wishbone registers block
-- Project    : CBMIA, MIL1553 bus controller
-- Website    : http://
-------------------------------------------------------------------------------
-- File       : cbmia_regs.wb
-- Author     : Matthieu Cattin
-- Company    : CERN (BE-CO-HT)
-- Created    : 2012-02-29
-- Last update: 2012-02-29
-- Platform   : FPGA-generic
-- Standard   : VHDL '87
-------------------------------------------------------------------------------
-- Description: CBMIA wishbone registers description to be used with wbgen2
-------------------------------------------------------------------------------
--
-- Copyright (c) 2009 - 2010 CERN
--
-- This source file is free software; you can redistribute it
-- and/or modify it under the terms of the GNU Lesser General
-- Public License as published by the Free Software Foundation;
-- either version 2.1 of the License, or (at your option) any
-- later version.
--
-- This source is distributed in the hope that it will be
-- useful, but WITHOUT ANY WARRANTY; without even the implied
-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
-- PURPOSE.  See the GNU Lesser General Public License for more
-- details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this source; if not, download it
-- from http://www.gnu.org/licenses/lgpl-2.1.html
--
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author          Description
-- 2012-02-29  1.0      mcattin         Created
-------------------------------------------------------------------------------
-- TODO: - 
--       - 
-------------------------------------------------------------------------------

peripheral {
  name ="CBMIA ";
  prefix="cbmia";
  hdl_entity="cbmia_regs";


  reg {
    name = "Status register.";
    prefix = "stat";

    field {
      name = "VHDL version.";
      description = "4-digit binary coded decimal VHDL version (e.g. 0102 = V01.02).";
      prefix = "ver";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "PCB temperature.";
      description = "Format: 12-bit signed, fixed point.";
      prefix = "temp";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Unique ID (MSB) register.";
    description = "32 most significant bits of the 64-bit unique ID from DS1822.";
    prefix = "id_msb";

    field {
      name = "Unique ID (MSB) register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Unique ID (LSB) register.";
    description = "32 least significant bits of the 64-bit unique ID from DS1822.";
    prefix = "id_lsb";

    field {
      name = "Unique ID (LSB) register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Control register.";
    prefix = "ctrl";

    field {
      name = "Software reset.";
      description = "Software controlled reset of the logic.\nWrite 0 = no effect\nWrite 1 = resets the logic";
      prefix = "sw_rst";
      type = MONOSTABLE;
    };

    field {
      name = "Send frame.";
      description = "Sends the frame in Tx FIFO.\nWrite 0 = no effect\nWrite 1 = sends frame";
      prefix = "send_frame";
      type = MONOSTABLE;
    };

    field {
      name = "Clear Tx FIFO.";
      description = "Clears Tx FIFO.\nWrite 0 = no effect\nWrite 1 = clears FIFO";
      prefix = "clr_tx_fifo";
      type = MONOSTABLE;
    };

    field {
      name = "Clear Rx FIFO.";
      description = "Clears Rx FIFO.\nWrite 0 = no effect\nWrite 1 = clears FIFO";
      prefix = "clr_tx_fifo";
      type = MONOSTABLE;
    };
  };


  reg {
    name = "Frame sent time-tag register.";
    description = "This time-tag comes from a 32-bit free running counter, frozen at the end of a frame transmission.";
    prefix = "send_tag";

    field {
      name = "Frame sent time-tag register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Frame reveived time-tag register.";
    description = "This time-tag comes from a 32-bit free running counter, frozen at the end of a frame reception.";
    prefix = "receive_tag";

    field {
      name = "Frame reveived time-tag register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Free running counter register.";
    description = "Free running counter used for time-tagging.";
    prefix = "tag_cnt";

    field {
      name = "Free running counter register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  fifo_reg {
    size = 33;
    direction = BUS_TO_CORE;
    prefix = "tx_fifo";
    name = "mil1553 transmitter";
    description = "This FIFO holds the words to be transmitted in the next mil1553 frame.";
    flags_bus = {FIFO_FULL, FIFO_EMPTY, FIFO_COUNT};
    flags_dev = {FIFO_FULL, FIFO_EMPTY, FIFO_COUNT};

    field {
      name = "mil1553 word to transmit";
      prefix = "word";
      type = SLV;
      size = 16;
    };

    field {
      name = "mil1553 word type flag.\n0 = data\n1 = command";
      prefix = "word_type";
      type = BIT;
    };
  };


  fifo_reg {
    size = 33;
    direction = CORE_TO_BUS;
    prefix = "rx_fifo";
    name = "mil1553 receiver";
    description = "This FIFO holds the words reveived in the last mil1553 frame.";
    flags_bus = {FIFO_FULL, FIFO_EMPTY, FIFO_COUNT};
    flags_dev = {FIFO_FULL, FIFO_EMPTY, FIFO_COUNT};

    field {
      name = "mil1553 word received";
      prefix = "word";
      type = SLV;
      size = 16;
    };

    field {
      name = "mil1553 word type flag.\n0 = data\n1 = status";
      prefix = "word_type";
      type = BIT;
    };

    field {
      name = "mil1553 word error flag.\n0 = no error\n1 = word contains error";
      prefix = "word_error";
      type = BIT;
    };

    field {
      name = "Parity error flag.\n0 = no error\n1 = parity error";
      prefix = "parity_error";
      type = BIT;
    };

    field {
      name = "Manchester code violation flag.\n0 = no violation\n1 = code violation";
      prefix = "code_violation";
      type = BIT;
    };
  };


  irq {
    name = "mil1553 frame sent.";
    trigger = LEVEL_0;
    prefix = "tx_done";
  };

  irq {
    name = "mil1553 frame received.";
    trigger = LEVEL_0;
    prefix = "rx_done";
  };


};