-- -*- Mode: LUA; tab-width: 2 -*-

-------------------------------------------------------------------------------
-- Title      : CBMIA wishbone registers block
-- Project    : CBMIA, MIL1553 bus controller
-- Website    : http://
-------------------------------------------------------------------------------
-- File       : cbmia_regs.wb
-- Author     : Matthieu Cattin
-- Company    : CERN (BE-CO-HT)
-- Created    : 2012-02-29
-- Last update: 2012-02-29
-- Platform   : FPGA-generic
-- Standard   : VHDL '87
-------------------------------------------------------------------------------
-- Description: CBMIA wishbone registers description to be used with wbgen2
-------------------------------------------------------------------------------
--
-- Copyright (c) 2009 - 2010 CERN
--
-- This source file is free software; you can redistribute it
-- and/or modify it under the terms of the GNU Lesser General
-- Public License as published by the Free Software Foundation;
-- either version 2.1 of the License, or (at your option) any
-- later version.
--
-- This source is distributed in the hope that it will be
-- useful, but WITHOUT ANY WARRANTY; without even the implied
-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
-- PURPOSE.  See the GNU Lesser General Public License for more
-- details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this source; if not, download it
-- from http://www.gnu.org/licenses/lgpl-2.1.html
--
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author          Description
-- 2012-02-29  1.0      mcattin         Created
-------------------------------------------------------------------------------
-- TODO: - 
--       - 
-------------------------------------------------------------------------------

peripheral {
  name ="CBMIA ";
  prefix="cbmia";
  hdl_entity="cbmia_regs";


  reg {
    name = "Interrupt source register.";
    prefix = "irq_src";

    field {
      name = "RX done.";
      description = "Frame received and available in the RX buffer.";
      prefix = "rx_done";
      type = BIT;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "TX done.";
      description = "Frame from TX buffer has been sent.";
      prefix = "tx_done";
      type = BIT;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Interrupt enable register.";
    prefix = "irq_en";

    field {
      name = "RX done interrupt enable.";
      description = "Write 0 = interrupt disabled\nWrite 1 = interrupt enabled";
      prefix = "rx_done";
      type = BIT;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "TX done interrupt enable.";
      description = "Write 0 = interrupt disabled\nWrite 1 = interrupt enabled";
      prefix = "tx_done";
      type = BIT;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };


  reg {
    name = "RTI presence register.";
    prefix = "rti_pres";
    description = "Each bit represents the status of an RTI on the bus.\nRead 1 = present\nRead 0 = absent";

    field {
      name = "RTI presence register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Status register.";
    prefix = "stat";

    field {
      name = "VHDL version.";
      description = "4-digit binary coded decimal VHDL version (e.g. 0102 = V01.02).";
      prefix = "ver";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "PCB temperature.";
      description = "Format: 12-bit signed, fixed point.";
      prefix = "temp";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Control register.";
    prefix = "ctrl";

    field {
      name = "Software reset.";
      description = "Software controlled reset of the logic.\nWrite 0 = no effect\nWrite 1 = resets the logic";
      prefix = "sw_rst";
      type = MONOSTABLE;
    };

    field {
      name = "Disable hardware polling.";
      description = "Write 0 = Hardware polling enable\nWrite 1 = Hardware polling disable";
      prefix = "hw_pol_dis";
      type = BIT;
    };
  };


  reg {
    name = "Spare register";
    prefix = "spare";
    description = "Can be used to put more status bits, counters...";


    field {
      name = "Spare";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Unique ID (MSB) register.";
    description = "32 most significant bits of the 64-bit unique ID from DS1822.";
    prefix = "id_msb";

    field {
      name = "Unique ID (MSB) register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Unique ID (LSB) register.";
    description = "32 least significant bits of the 64-bit unique ID from DS1822.";
    prefix = "id_lsb";

    field {
      name = "Unique ID (LSB) register.";
      type = SLV;
      size = 32;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  reg {
    name = "Transmit register.";
    description = "Bits 4..0 = Word count/Mode code\nBits 9..5 = Sub-system address/Mode\nBit 10 = Transmit/receive\nBits 15..11 = RT address";
    prefix = "tx_reg";

    field {
      name = "Transmit register.";
      type = SLV;
      size = 16;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };


  reg {
    name = "Receive register.";
    description = "Contains the status word of the last received frame.";
    prefix = "rx_reg";

    field {
      name = "Receive register.";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };


  ram {
		name = "Receive buffer";
		prefix = "rx_buf";
		size = 32;
		width = 16;
		access_bus = READ_WRITE;
		access_dev = WRITE_ONLY;
	};


  ram {
		name = "Transmit buffer";
		prefix = "tx_buf";
		size = 32;
		width = 16;
		access_bus = READ_WRITE;
		access_dev = READ_ONLY;
	};

};